/* PIDMapping.cxx */

#include "PIDMapping.h"
#include <cassert>

//_____________________________________________________________________________________________________________________________________________________________
//*************************************************************************************************************************************************************
//_____________________________________________________________________________________________________________________________________________________________

//________________________________________________________________________________________________________________
int GetParticleIndexInPidInfo(int aPID)
{
  for(unsigned int i=0; i<cPidInfo.size(); i++)
  {
    if(aPID == cPidInfo[i].pdgType) return i;
  }

  assert(0);
  return -1;
}

//________________________________________________________________________________________________________________
int GetParticlePidFromIndex(int aIndex)
{
  return cPidInfo[aIndex].pdgType;
}

//________________________________________________________________________________________________________________
PidInfo GetParticlePidInfo(int aPID)
{
  for(unsigned int i=0; i<cPidInfo.size(); i++)
  {
    if(aPID == cPidInfo[i].pdgType) return cPidInfo[i];
  }

  assert(0);
  return cPidInfo[0];
}

//________________________________________________________________________________________________________________
TString GetParticleName(int aPID)
{
  assert(cUniqueFathersPIDsFull.size() == cUniqueFathersNamesFull.size());

  int tPosition = -1;
  for(unsigned int i=0; i<cUniqueFathersPIDsFull.size(); i++)
  {
    if(cUniqueFathersPIDsFull[i] == aPID) tPosition = i;
  }
  if(tPosition==-1) cout << "CRASH!!!! aPID = " << aPID << endl;
  assert(tPosition > -1);

  return cUniqueFathersNamesFull[tPosition];
}
/*
//________________________________________________________________________________________________________________
bool IncludeAsPrimary(int aPID1, int aPID2)
{
  bool bInclude1=false, bInclude2=false;
  for(unsigned int i=0; i<cUniqueFathersPIDsIncludeAsPrimary.size(); i++)
  {
    if(cUniqueFathersPIDsIncludeAsPrimary[i] == aPID1) bInclude1 = true;
    if(cUniqueFathersPIDsIncludeAsPrimary[i] == aPID2) bInclude2 = true;
  }

  return(bInclude1&&bInclude2);
}
*/

//________________________________________________________________________________________________________________
TString GetParticleNamev2(int aPID)
{
  for(unsigned int i=0; i<cPidInfo.size(); i++)
  {
    if(aPID == cPidInfo[i].pdgType) return cPidInfo[i].name;
  }

  assert(0);
  return TString("");
}

//________________________________________________________________________________________________________________
int GetParticlePid(TString aName)
{
  for(unsigned int i=0; i<cPidInfo.size(); i++)
  {
    if(aName.EqualTo(cPidInfo[i].name)) return cPidInfo[i].pdgType;
  }

  assert(0);
  return 0;
}


//________________________________________________________________________________________________________________
double GetParticleDecayLength(int aPID)
{
  for(unsigned int i=0; i<cPidInfo.size(); i++)
  {
    if(aPID == cPidInfo[i].pdgType) return cPidInfo[i].decayLength;
  }

  assert(0);
  return 0;
}

//________________________________________________________________________________________________________________
double GetParticleDecayLength(TString aName)
{
  for(unsigned int i=0; i<cPidInfo.size(); i++)
  {
//cout << "aName = " << aName << endl;
//cout << "cPidInfo[i].name = " << cPidInfo[i].name << endl << endl;
    if(aName.EqualTo(cPidInfo[i].name)) return cPidInfo[i].decayLength;
  }

  assert(0);
  return 0;
}



//________________________________________________________________________________________________________________
bool IncludeAsPrimary(int aPID1, int aPID2)
{
  bool bInclude1=true, bInclude2=true;
  for(unsigned int i=0; i<cUniqueFathersPIDsExcludeAsPrimary.size(); i++)
  {
    if(cUniqueFathersPIDsExcludeAsPrimary[i] == aPID1) bInclude1 = false;
    if(cUniqueFathersPIDsExcludeAsPrimary[i] == aPID2) bInclude2 = false;
  }

  if(!bInclude1 || !bInclude2) return false;
  else return true;
}

//________________________________________________________________________________________________________________
bool IncludeAsPrimary(int aPID1, int aPID2, double aMaxDecayLength)
{
  if(aMaxDecayLength < 0.) return IncludeAsPrimary(aPID1,aPID2);
  else
  {
    bool bInclude1=true, bInclude2=true;
    if(aPID1 != kPDGLam && aPID1 != kPDGALam && GetParticleDecayLength(aPID1) > aMaxDecayLength) bInclude1 = false;
    if(aPID2 != kPDGKchP && aPID2 != kPDGKchM && aPID2 != kPDGK0 && GetParticleDecayLength(aPID2) > aMaxDecayLength) bInclude2 = false;

    if(!bInclude1 || !bInclude2) return false;
    else return true;
  }
}

//________________________________________________________________________________________________________________
void PrintIncludeAsPrimary(double aMaxDecayLength)
{
  for(unsigned int i=0; i<cPidInfo.size(); i++)
  {
    if(GetParticleDecayLength(cPidInfo[i].pdgType) <= aMaxDecayLength) cout << cPidInfo[i].name << " : " << cPidInfo[i].pdgType << endl;
  }

}


//________________________________________________________________________________________________________________
bool PairAccountedForInResiduals(int aPID1, int aPID2)
{
  bool tAccountedFor = false;
  if((aPID1==kPDGSigma || aPID1==kPDGASigma) && (aPID2 == kPDGKchP || aPID2 == kPDGKchM)) tAccountedFor = true;
  else if((aPID1==kPDGXi0 || aPID1==kPDGAXi0) && (aPID2 == kPDGKchP || aPID2 == kPDGKchM)) tAccountedFor = true;
  else if((aPID1==kPDGXiC || aPID1==kPDGAXiC) && (aPID2 == kPDGKchP || aPID2 == kPDGKchM)) tAccountedFor = true;
  else if((aPID1==kPDGSigStP || aPID1==kPDGASigStM) && (aPID2 == kPDGKchP || aPID2 == kPDGKchM)) tAccountedFor = true;
  else if((aPID1==kPDGSigStM || aPID1==kPDGASigStP) && (aPID2 == kPDGKchP || aPID2 == kPDGKchM)) tAccountedFor = true;
  else if((aPID1==kPDGSigSt0 || aPID1==kPDGASigSt0) && (aPID2 == kPDGKchP || aPID2 == kPDGKchM)) tAccountedFor = true;

  else if((aPID1 == kPDGLam || aPID1 == kPDGALam) && (aPID2 == kPDGKSt0 || aPID2 == kPDGAKSt0)) tAccountedFor = true;
  else if((aPID1==kPDGSigma || aPID1==kPDGASigma) && (aPID2 == kPDGKSt0 || aPID2 == kPDGAKSt0)) tAccountedFor = true;
  else if((aPID1==kPDGXi0 || aPID1==kPDGAXi0) && (aPID2 == kPDGKSt0 || aPID2 == kPDGAKSt0)) tAccountedFor = true;
  else if((aPID1==kPDGXiC || aPID1==kPDGAXiC) && (aPID2 == kPDGKSt0 || aPID2 == kPDGAKSt0)) tAccountedFor = true;

  else if((aPID1 == kPDGLam || aPID1 == kPDGALam) && (aPID2 == kPDGK0)) tAccountedFor = true;
  else if((aPID1==kPDGSigma || aPID1==kPDGASigma) && (aPID2 == kPDGK0)) tAccountedFor = true;
  else if((aPID1==kPDGXi0 || aPID1==kPDGAXi0) && (aPID2 == kPDGK0)) tAccountedFor = true;
  else if((aPID1==kPDGXiC || aPID1==kPDGAXiC) && (aPID2 == kPDGK0)) tAccountedFor = true;
  else if((aPID1==kPDGSigStP || aPID1==kPDGASigStM) && (aPID2 == kPDGK0)) tAccountedFor = true;
  else if((aPID1==kPDGSigStM || aPID1==kPDGASigStP) && (aPID2 == kPDGK0)) tAccountedFor = true;
  else if((aPID1==kPDGSigSt0 || aPID1==kPDGASigSt0) && (aPID2 == kPDGK0)) tAccountedFor = true;

  else if((aPID1 == kPDGLam || aPID1 == kPDGALam) && (aPID2 == kPDGKSt0 || aPID2 == kPDGAKSt0)) tAccountedFor = true;
  else if((aPID1==kPDGSigma || aPID1==kPDGASigma) && (aPID2 == kPDGKSt0 || aPID2 == kPDGAKSt0)) tAccountedFor = true;
  else if((aPID1==kPDGXi0 || aPID1==kPDGAXi0) && (aPID2 == kPDGKSt0 || aPID2 == kPDGAKSt0)) tAccountedFor = true;
  else if((aPID1==kPDGXiC || aPID1==kPDGAXiC) && (aPID2 == kPDGKSt0 || aPID2 == kPDGAKSt0)) tAccountedFor = true;

  return tAccountedFor;
}

//________________________________________________________________________________________________________________
bool IncludeInOthers(int aPID1, int aPID2)
{
  if(!IncludeAsPrimary(aPID1,aPID2) && !PairAccountedForInResiduals(aPID1,aPID2)) return true;
  else return false;
}

//________________________________________________________________________________________________________________
bool IncludeInOthers(int aPID1, int aPID2, double aMaxDecayLength)
{
  if(aMaxDecayLength < 0.) return IncludeInOthers(aPID1,aPID2);
  else
  {
    if(!IncludeAsPrimary(aPID1,aPID2,aMaxDecayLength) && !PairAccountedForInResiduals(aPID1,aPID2)) return true;
    else return false;
  }
}



//_____________________________________________________________________________________________________________________________________________________________
//*************************************************************************************************************************************************************
//_____________________________________________________________________________________________________________________________________________________________


//________________________________________________________________________________________________________
vector<int> cUniqueFathersPIDsFull {
// a
10111, 10211, -10211, /* a_{0} */
115, 215, -215,       /* a_{2} */ //TODO in particles.data, two 215 entries, should be 215 and -215
119, 219, -219,       /* a_{4} */

// phi
333, 337, 100333,

// f
335,                    /* f'_{2} */
10221, 10331, 9000223,  /* f_{0} */
20223, 20333,           /* f_{1} */

// pi
10115, 10215, -10215,

// eta
100331, 

// kaons
311,
321,
313, 323, 30313, 30323, 100313, 100323, 
10311, 10321, 
10313, 10323, 20313, 20323,
20315, 20325, 
317, 327,

-311,
-321,
-313, -323, -30313, -30323, -100313, -100323, 
-10311, -10321, 
-10313, -10323, -20313, -20323,
-20315, -20325, 
-317, -327, 



// sigma
3114, 3116, 3118, 
3212, 3214, 3216, 3218, 3224, 3226, 3228, 
4028, 4128, 4228, 8116, 8117, 8118, 
13112, 13114, 13116, 
13212, 13214, 13216, 13222, 13224, 13226, 
23114, 
23214, 23224, 
  //--NEW
3222, 

-3114, -3116, -3118, 
-3212, -3214, -3216, -3218, -3224, -3226, -3228, 
-4028, -4128, -4228, -8116, -8117, -8118, 
-13112, -13114, -13116,
-13212, -13214, -13216, -13222, -13224, -13226, 
-23114, 
-23214, -23224, 
  //--NEW
-3222, 



// lambda
3122, 3124, 3126, 3128, 
13124, 13126, 
23122, 23124, 
33122, 
43122, 53122, 

-3122, -3124, -3126, -3128, 
-13124, -13126, 
-23122, -23124, 
-33122, 
-43122, -53122, 

// xi
3312, 3322, 
8900, 8901, 
13314, 13324, 
67000, 67001, 67718, 67719, 

-3312, -3322, 
-8900, -8901, 
-13314, -13324, 
-67000, -67001, -67718, -67719, 

// omega
3334, 9000, 

-3334, -9000, 


// neutron
32112, 32212, 
42112, 42212,
31214, 32124,
  //--NEW
1214, 1218, 2116, 2124, 2128, 2216, 5128, 
5218, 9400, 9401, 12112, 12116, 12212, 12216, 
21214, 22124, 22212, 

-32112, -32212, 
-42112, -42212,
-31214, -32124,
  //--NEW
-1214, -1218, -2116, -2124, -2128, -2216, -5128, 
-5218, -9400, -9401, -12112, -12116, -12212, -12216, 
-21214, -22124, -22212, 


// delta
  //--NEW
1112, 1116, 1118, 1212,
1216, 2114, 2118, 2122, 2126, 2214, 
2218, 2224, 9297, 9298, 9299, 11114, 
11116, 11216, 12114, 12126, 12214, 
21112, 21114, 21212, 22114, 
22122, 22214, 31114, 32114, 32214,
  //--NEW
-1112, -1116, -1118, -1212,
-1216, -2114, -2118, -2122, -2126, -2214, 
-2218, -2224, -9297, -9298, -9299, -11114, 
-11116, -11216, -12114, -12126, -12214, 
-21112, -21114, -21212, -22114, 
-22122, -22214, -31114, -32114, -32214, 


// proton
  //--NEW
2212, 
  //--NEW
-2212
};



//________________________________________________________________________________________________________
vector<TString> cUniqueFathersNamesFull {
// a
"a_{0}(1450)^{0}", "a_{0}(1450)^{+}", "a_{0}(1450)^{-}",
"a_{2}(1320)^{0}", "a_{2}(1320)^{+}", "a_{2}(1320)^{-}",
"a_{4}(2040)^{0}", "a_{4}(2040)^{+}", "a_{4}(2040)^{-}",

// phi
"#phi(1020)", "#phi_{3}(1850)", "#phi(1680)",

// f
"f'_{2}(1525)", 
"f_{0}(1370)", "f_{0}(1710)", "f_{0}(1500)",
"f_{1}(1285)", "f_{1}(1420)", 

// pi
"#pi_{2}(1670)^{0}", "#pi_{2}(1670)^{+}", "#pi_{2}(1670)^{-}",

// eta
"#eta(1475)",


// kaon
"K^{0}",
"K+",
"K*(892)^{0}", "K*(892)^{+}", "K*(1680)^{0}", "#bar{K*}(1680)^{0}", "K*(1410)^{0}", "K*(1410)^{+}", 
"K*_{0}(1430)^{0}", "K*_{0}(1430)^{+}", 
"K_{1}(1270)^{0}", "K_{1}(1270)^{+}", "K_{1}(1400)^{0}", "K_{1}(1400)^{+}",
"K_{2}(1820)^{+}", "K_{2}(1820)^{-}", 
"K*_{3}(1780)^{0}", "#bar{K*}_{3}(1780)^{0}", 

"#bar{K^{0}}",
"K-",
"#bar{K*}(892)^{0}", "K*(892)^{-}", "K*(1680)^{+}", "K*(1680)^{-}", "#bar{K*}(1410)^{0}", "K*(1410)^{-}", 
"#bar{K*}_{0}(1430)^{0}", "K*_{0}(1430)^{-}", 
"#bar{K}_{1}(1270)^{0}", "K_{1}(1270)^{-}", "#bar{K}_{1}(1400)^{0}", "K_{1}(1400)^{-}",
"#bar{K}_{2}(1820)^{+}", "K_{2}(1820)^{0}", 
"K*_{3}(1780)^{+}", "#bar{K*}_{3}(1780)^{-}", 



// sigma
"#Sigma*(1385)^{-}", "#Sigma(1775)^{+}", "#Sigma(2030)^{+}", 
"#Sigma^{0}", "#Sigma*(1385)^{0}", "#Sigma(1775)^{-}", "#Sigma(2030)^{-}", "#Sigma*(1385)^{+}", "#Sigma(1775)^{0}", "#Sigma(2030)^{0}", 
"#Sigma(2250)^{+}", "#Sigma(2250)^{-}", "#Sigma(2250)^{0}", "#Sigma(1750)^{+}", "#Sigma(1750)^{0}", "#Sigma(1750)^{-}", 
"#Sigma(1660)^{+}", "#Sigma(1670)^{+}", "#Sigma(1915)^{+}", 
"#Sigma(1660)^{-}", "#Sigma(1670)^{-}", "#Sigma(1915)^{-}", "#Sigma(1660)^{0}", "#Sigma(1670)^{0}", "#Sigma(1915)^{0}", 
"#Sigma(1940)^{+}", 
"#Sigma(1940)^{-}", "#Sigma(1940)^{0}", 
//--NEW
"#Sigma(1189)^{+}",

"#bar{#Sigma*}(1385)^{+}", "#bar{#Sigma}(1775)^{-}", "#bar{#Sigma}(2030)^{-}", 
"#bar{#Sigma}^{0}", "#bar{#Sigma*}(1385)^{0}", "#bar{#Sigma}(1775)^{+}", "#bar{#Sigma}(2030)^{+}", "#bar{#Sigma*}(1385)^{-}", "#bar{#Sigma}(1775)^{0}", "#bar{#Sigma}(2030)^{0}", 
"#bar{#Sigma}(2250)^{-}", "#bar{#Sigma}(2250)^{+}", "#bar{#Sigma}(2250)^{0}", "#bar{#Sigma}(1750)^{-}", "#bar{#Sigma}(1750)^{0}", "#bar{#Sigma}(1750)^{+}", 
"#bar{#Sigma}(1660)^{-}", "#bar{#Sigma}(1670)^{-}", "#bar{#Sigma}(1915)^{-}", 
"#bar{#Sigma}(1660)^{+}", "#bar{#Sigma}(1670)^{+}", "#bar{#Sigma}(1915)^{+}", "#bar{#Sigma}(1660)^{0}", "#bar{#Sigma}(1670)^{0}", "#bar{#Sigma}(1915)^{0}", 
"#bar{#Sigma}(1940)^{-}", 
"#bar{#Sigma}(1940)^{+}", "#bar{#Sigma}(1940)^{0}", 
//--NEW
"#bar{#Sigma}(1189)^{-}",


// lambda
"#Lambda", "#Lambda(1520)", "#Lambda(1820)", "#Lambda(2100)", 
"#Lambda(1690)", "#Lambda(1830)", 
"#Lambda(1600)", "#Lambda(1890)", 
"#Lambda(1670)", 
"#Lambda(1800)", "#Lambda(1810)", 

"#bar{#Lambda}", "#bar{#Lambda}(1520)", "#bar{#Lambda}(1820)", "#bar{#Lambda}(2100)", 
"#bar{#Lambda}(1690)", "#bar{#Lambda}(1830)", 
"#bar{#Lambda}(1600)", "#bar{#Lambda}(1890)", 
"#bar{#Lambda}(1670)", 
"#bar{#Lambda}(1800)", "#bar{#Lambda}(1810)", 


// xi
"#Xi^{-}", "#Xi^{0}", 
"#bar{#Xi}(2030)^{+}", "#Xi(2030)^{-}", 
"#Xi(1820)^{-}", "#bar{#Xi}(1820)^{+}", 
"#Xi(1950)^{0}", "#Xi(1950)^{-}", "#Xi(1690)^{0}", "#bar{#Xi}(1690)^{+}", 

"#bar{#Xi}^{+}", "#bar{#Xi}^{0}", 
"#bar{#Xi}(2030)^{0}", "#Xi(2030)^{0}", 
"#Xi(1820)^{0}", "#bar{#Xi}(1820)^{0}", 
"#bar{#Xi}(1950)^{0}", "#bar{#Xi}(1950)^{+}", "#bar{#Xi}(1690)^{0}", "#Xi(1690)^{-}", 

// omega
"#Omega^{-}", "#Omega(2250)^{-}", 

"#bar{#Omega}^{+}", "#bar{#Omega}(2250)^{+}", 

// neutron
"N(1650)^{+}", "N(1650)^{0}", 
"N(1710)^{+}", "N(1710)^{0}",
"N(1720)^{+}", "N(1720)^{0}",
//--NEW
"N(1520)^{0}", "N(2190)^{+}", "N(1675)^{+}", "N(1520)^{+}", "N(2190)^{0}", "N(1675)^{0}", "N(2250)^{+}", 
"N(2250)^{0}", "N(2600)^{0}", "N(2600)^{+}", "N(1440)^{0}", "N(1680)^{+}", "N(1440)^{+}", "N(1680)^{0}", 
"N(1700)^{+}", "N(1700)^{0}", "N(1535)^{+}", 


"#bar{N}(1650)^{-}", "#bar{N}(1650)^{0}", 
"#bar{N}(1710)^{-}", "#bar{N}(1710)^{0}",
"#bar{N}(1720)^{-}", "#bar{N}(1720)^{0}",
//--NEW
"#bar{N}(1520)^{0}", "#bar{N}(2190)^{-}", "#bar{N}(1675)^{-}", "#bar{N}(1520)^{-}", "#bar{N}(2190)^{0}", "#bar{N}(1675)^{0}", "#bar{N}(2250)^{-}", 
"#bar{N}(2250)^{0}", "#bar{N}(2600)^{0}", "#bar{N}(2600)^{-}", "#bar{N}(1440)^{0}", "#bar{N}(1680)^{-}", "#bar{N}(1440)^{-}", "#bar{N}(1680)^{0}", 
"#bar{N}(1700)^{-}", "#bar{N}(1700)^{0}", "#bar{N}(1535)^{-}", 

// delta
//--NEW
// "#Delta()^{}", 
"#Delta(1620)^{++}", "#Delta(1905)^{++}", "#Delta(1950)^{++}", "#Delta(1620)^{+}", 
"#Delta(1905)^{+}", "#Delta(1232)^{0}", "#Delta(1950)^{+}", "#Delta(1620)^{0}", "#Delta(1905)^{0}", "#Delta(1232)^{+}", 
"#Delta(1950)^{0}", "#Delta(1232)^{++}", "#Delta(2420)^{++}", "#Delta(2420)^{+}", "#Delta(2420)^{0}", "#Delta(1700)^{++}", 
"#Delta(1930)^{++}", "#Delta(1930)^{+}", "#Delta(1700)^{+}", "#Delta(1930)^{0}", "#Delta(1700)^{0}", 
"#Delta(1910)^{++}", "#Delta(1920)^{++}", "#Delta(1910)^{+}", "#Delta(1920)^{+}", 
"#Delta(1910)^{0}", "#Delta(1920)^{0}", "#Delta(1600)^{++}", "#Delta(1600)^{+}", "#Delta(1600)^{0}", 


//--NEW
// "#bar{#Delta}()^{}", 
"#bar{#Delta}(1620)^{--}", "#bar{#Delta}(1905)^{--}", "#bar{#Delta}(1950)^{--}", "#bar{#Delta}(1620)^{-}", 
"#bar{#Delta}(1905)^{-}", "#bar{#Delta}(1232)^{0}", "#bar{#Delta}(1950)^{-}", "#bar{#Delta}(1620)^{0}", "#bar{#Delta}(1905)^{0}", "#bar{#Delta}(1232)^{-}", 
"#bar{#Delta}(1950)^{0}", "#bar{#Delta}(1232)^{--}", "#bar{#Delta}(2420)^{--}", "#bar{#Delta}(2420)^{-}", "#bar{#Delta}(2420)^{0}", "#bar{#Delta}(1700)^{--}", 
"#bar{#Delta}(1930)^{--}", "#bar{#Delta}(1930)^{-}", "#bar{#Delta}(1700)^{-}", "#bar{#Delta}(1930)^{0}", "#bar{#Delta}(1700)^{0}", 
"#bar{#Delta}(1910)^{--}", "#bar{#Delta}(1920)^{--}", "#bar{#Delta}(1910)^{-}", "#bar{#Delta}(1920)^{-}", 
"#bar{#Delta}(1910)^{0}", "#bar{#Delta}(1920)^{0}", "#bar{#Delta}(1600)^{--}", "#bar{#Delta}(1600)^{-}", "#bar{#Delta}(1600)^{0}", 

// proton
"p",
"#bar{p}"
};
//_____________________________________________________________________________________________________________________________________________________________
//*************************************************************************************************************************************************************
//_____________________________________________________________________________________________________________________________________________________________

//________________________________________________________________________________________________________
vector<int> cUniqueFathersPIDsIncludeAsPrimary {
// a
10111, 10211, -10211, /* a_{0} */
115, 215, -215,       /* a_{2} */ //TODO in particles.data, two 215 entries, should be 215 and -215
119, 219, -219,       /* a_{4} */

// phi
/*333,*/ 337, 100333,

// f
335,                    /* f'_{2} */
10221, 10331, 9000223,  /* f_{0} */
/*20223,*/ /*20333,*/           /* f_{1} */

// pi
10115, 10215, -10215,

// eta
100331, 

// kaons
311,
321,
/*313,*/ /*323,*/ 30313, 30323, 100313, 100323, 
10311, 10321, 
10313, 10323, 20313, 20323,
20315, 20325, 
317, 327,

-311,
-321,
/*-313,*/ /*-323,*/ -30313, -30323, -100313, -100323, 
-10311, -10321, 
-10313, -10323, -20313, -20323,
-20315, -20325, 
-317, -327, 



// sigma
/*3114,*/ 3116, 3118, 
/*3212,*/ /*3214,*/ 3216, 3218, /*3224,*/ 3226, 3228, 
4028, 4128, 4228, 8116, 8117, 8118, 
13112, /*13114,*/ 13116, 
13212, /*13214,*/ 13216, 13222, /*13224,*/ 13226, 
23114, 
23214, 23224, 
  //--NEW
/*3222,*/ 

/*-3114,*/ -3116, -3118, 
/*-3212,*/ /*-3214,*/ -3216, -3218, /*-3224,*/ -3226, -3228, 
-4028, -4128, -4228, -8116, -8117, -8118, 
-13112, /*-13114,*/ -13116,
-13212, /*-13214,*/ -13216, -13222, /*-13224,*/ -13226, 
-23114, 
-23214, -23224, 
  //--NEW
/*-3222,*/ 



// lambda
3122, /*3124,*/ 3126, 3128, 
/*13124,*/ 13126, 
23122, 23124, 
/*33122,*/ 
43122, 53122, 

-3122, /*-3124,*/ -3126, -3128, 
/*-13124,*/ -13126, 
-23122, -23124, 
/*-33122,*/ 
-43122, -53122, 

// xi
/*3312,*/ /*3322,*/ 
/*8900,*/ /*8901,*/ 
/*13314,*/ /*13324,*/ 
/*67000,*/ /*67001,*/ /*67718,*/ /*67719,*/ 

/*-3312,*/ /*-3322,*/ 
/*-8900,*/ /*-8901,*/ 
/*-13314,*/ /*-13324,*/ 
/*-67000,*/ /*-67001,*/ /*-67718,*/ /*-67719,*/ 

// omega
/*3334,*/ /*9000,*/ 

/*-3334,*/ /*-9000,*/


// neutron
32112, 32212, 
42112, 42212,
31214, 32124,
  //--NEW
1214, 1218, 2116, 2124, 2128, 2216, 5128, 
5218, 9400, 9401, 12112, 12116, 12212, 12216, 
21214, 22124, 22212, 

-32112, -32212, 
-42112, -42212,
-31214, -32124,
  //--NEW
-1214, -1218, -2116, -2124, -2128, -2216, -5128, 
-5218, -9400, -9401, -12112, -12116, -12212, -12216, 
-21214, -22124, -22212, 


// delta
  //--NEW
1112, 1116, 1118, 1212,
1216, 2114, 2118, 2122, 2126, 2214, 
2218, 2224, 9297, 9298, 9299, 11114, 
11116, 11216, 12114, 12126, 12214, 
21112, 21114, 21212, 22114, 
22122, 22214, 31114, 32114, 32214,
  //--NEW
-1112, -1116, -1118, -1212,
-1216, -2114, -2118, -2122, -2126, -2214, 
-2218, -2224, -9297, -9298, -9299, -11114, 
-11116, -11216, -12114, -12126, -12214, 
-21112, -21114, -21212, -22114, 
-22122, -22214, -31114, -32114, -32214, 


// proton
  //--NEW
2212, 
  //--NEW
-2212
};

//________________________________________________________________________________________________________
vector<int> cUniqueFathersPIDsExcludeAsPrimary {
// phi
333,

// f
20223, 20333,           /* f_{1} */

// kaons
313, 323,

-313, -323,



// sigma
3114, 
3212, 3214, 3224, 
13114,
13214, 13224,
3222,

-3114,
-3212, -3214, -3224, 
-13114,
-13214, -13224,
-3222,



// lambda
3124,
13124,
33122,

-3124,
-13124,
-33122, 

// xi
3312, 3322, 
8900, 8901, 
13314, 13324, 
67000, 67001, 67718, 67719, 

-3312, -3322, 
-8900, -8901, 
-13314, -13324, 
-67000, -67001, -67718, -67719, 

// omega
3334, 9000,

-3334, -9000

};

//_____________________________________________________________________________________________________________________________________________________________
//*************************************************************************************************************************************************************
//_____________________________________________________________________________________________________________________________________________________________


//________________________________________________________________________________________________________
vector<int> cUniqueLamFathersPIDs {
// sigma
3114, 3116, 3118,
3212, 3214, 3216, 3218, 3224, 3226, 3228,
4028, 4128, 4228, 8116, 8117, 8118,
13112, 13114, 13116,
13212, 13214, 13216, 13222, 13224, 13226,
23114,
23214, 23224,

// lambda
3122, 3124,
13124,
33122,

// xi
3312, 3322,
-8901, 8901,
-13314, 13314,
67000, 67001, 67718, -67719,

// omega
3334, 9000,

// neutron
32112, 32212,
42112, 42212,
31214, 32124
};


//________________________________________________________________________________________________________
vector<int> cUniqueALamFathersPIDs {
// sigma
-3114, -3116, -3118, 
-3212, -3214, -3216, -3218, -3224, -3226, -3228, 
-4128, -4228, -8117, -8118,
-13112, -13114, -13116,
-13212, -13214, -13216, -13222, -13224, -13226,
-23114,
-23214, -23224,

// lambda
-3122, -3124, 
-13124,
-33122,

// xi
-3312, -3322,
-8900, 8900,
-13324, 13324,
-67000, -67001, -67718, 67719

// omega
-3334, -9000,

// neutron
-32112, -32212,
-42112, -42212,
-31214, -32124,
};

vector<int> cAllLambdaFathers {
-67719, -67718, -67001, -67000, -42212, -42112, -33122, -32212, -32124, -32112, 
-31214, -23224, -23214, -23114, -13324, -13314, -13226, -13224, -13222, -13216, 
-13214, -13212, -13124, -13116, -13114, -13112, -8901, -8900, -8118, -8117, 
-8116, -4228, -4128, -4028, -3334, -3322, -3312, -3228, -3226, -3224, 
-3218, -3216, -3214, -3212, -3124, -3122, -3118, -3116, -3114, 3114, 
3116, 3118, 3122, 3124, 3212, 3214, 3216, 3218, 3224, 3226, 
3228, 3312, 3322, 3334, 4028, 4128, 4228, 8116, 8117, 8118, 
8900, 8901, 13112, 13114, 13116, 13124, 13212, 13214, 13216, 13222, 
13224, 13226, 13314, 13324, 23114, 23214, 23224, 31214, 32112, 32124, 
32212, 33122, 42112, 42212, 67000, 67001, 67718, 67719
};
//_____________________________________________________________________________________________________________________________________________________________
//*************************************************************************************************************************************************************
//_____________________________________________________________________________________________________________________________________________________________

//________________________________________________________________________________________________________
vector<int> cUniqueK0ShortFathersPIDs {
-67718, -67000, -53122, -43122, -33122, -30313, -23224, -23214, -23124, -23122, 
-23114, -20325, -13324, -13226, -13224, -13222, -13126, -13124, -13116, -13114, 
-13112, -10215, -10211, -8900, -8117, -8116, -4228, -4028, -3228, -3226, 
-3218, -3128, -3126, -3124, -3118, -3116, -317, -219, 115, 119, 
215, 311, 313, 317, 323, 333, 335, 337, 3218, 3228, 
8900, 10111, 10115, 10221, 10311, 10313, 10321, 10323, 10331, 20223, 
20313, 20323, 20333, 30313, 32124, 32212, 42212, 100313, 100323, 100331, 
100333, 9000223};

vector<int> cAllK0ShortFathers {
-67718, -67000, -53122, -43122, -33122, -30313, -23224, -23214, -23124, -23122, 
-23114, -20325, -13324, -13226, -13224, -13222, -13126, -13124, -13116, -13114, 
-13112, -10215, -10211, -8900, -8117, -8116, -4228, -4028, -3228, -3226, 
-3218, -3128, -3126, -3124, -3118, -3116, -317, -219, 115, 119, 
215, 311, 313, 317, 323, 333, 335, 337, 3218, 3228, 
8900, 10111, 10115, 10221, 10311, 10313, 10321, 10323, 10331, 20223, 
20313, 20323, 20333, 30313, 32124, 32212, 42212, 100313, 100323, 100331, 
100333, 9000223};

//_____________________________________________________________________________________________________________________________________________________________
//*************************************************************************************************************************************************************
//_____________________________________________________________________________________________________________________________________________________________

//________________________________________________________________________________________________________
vector<int> cUniqueKchPFathersPIDs {
// a
10111, 10211,
115, 215,
119, 219,

// phi
333, 337,

// f
335,
10221, 10331, 9000223,
20223, 20333, 

// pi
10115, 10215, 100333,

// eta
100331,

// kaons
321,
313, 323, -30313, 30313, 100313, 100323,
10311, 10321,
10313, 10323, 20313, 20323,
20315,
-317, 317,

// sigma
-3118, 3118,
-3216, -3218, -3226, -3228,
-4128, -4228, -8117, -8118,
-13212, -13214, -13216, -13222, -13224, -13226, 
-23114,
-23214, -23224, 

// lambda
-3124, -3126, -3128, 
-13124, -13126,
-23122, -23124, 
-33122,
-43122, -53122,

// xi
-8900, 8900,
13324,
-67001, -67718, 67719,

// omega
-3334, -9000,

// neutron
32112,
42112,
31214
};


//________________________________________________________________________________________________________
vector<int> cUniqueKchMFathersPIDs {
// a
10111, -10211,
115, 215,
119, -219,

// phi
333, 337, 100333,

// f
335,
10221, 10331, 9000223,
20223, 20333, 

// pi
10115, -10215,

// eta
100331

// kaons
-321,
-313, -323, -30323, 30323, -100313, -100323,
-10311, -10321, 
-10313, -10323, -20313, -20323,
20325,
-327, 327,

// sigma
-3118, 3118,
3216, 3218, 3226, 3228,
4128, 8117, 8118,
13212, 13214, 13216, 13222, 13224, 13226,
23114,
23214, 23224,

// lambda
3124, 3126, 3128,
13124, 13126,
23122, 23124,
33122, 
43122, 53122,

// xi
-8901, 8901,
13314,
67001, 67718, -67719,

// omega
3334, 9000, 

// neutron
-32112,
-42112,
-31214
};

vector<int> cAllKchFathers {
-100323, -100313, -67719, -67718, -67001, -53122, -43122, -42112, -33122, -32112, 
-31214, -30323, -30313, -23224, -23214, -23124, -23122, -23114, -20323, -20313, 
-13226, -13224, -13222, -13216, -13214, -13212, -13126, -13124, -10323, -10321, 
-10313, -10311, -10215, -10211, -9000, -8901, -8900, -8118, -8117, -4228, 
-4128, -3334, -3228, -3226, -3218, -3216, -3128, -3126, -3124, -3118, 
-327, -323, -321, -317, -313, -219, 115, 119, 215, 219, 
313, 317, 321, 323, 327, 333, 335, 337, 3118, 3124, 
3126, 3128, 3216, 3218, 3226, 3228, 3334, 4128, 4228, 8117, 8118, 
8900, 8901, 9000, 10111, 10115, 10211, 10215, 10221, 10311, 10313, 
10321, 10323, 10331, 13124, 13126, 13212, 13214, 13216, 13222, 13224, 
13226, 13314, 13324, 20223, 20313, 20315, 20323, 20325, 20333, 23114, 
23122, 23124, 23214, 23224, 30313, 30323, 31214, 32112, 33122, 42112, 
43122, 53122, 67001, 67718, 67719, 100313, 100323, 100331, 100333, 9000223
};
//_____________________________________________________________________________________________________________________________________________________________
//*************************************************************************************************************************************************************
//_____________________________________________________________________________________________________________________________________________________________


//________________________________________________________________________________________________________
vector<int> cUniqueProtFathersPIDs {

// delta
  //--NEW
1112, 1116, 1118, 1212,
1216, 2114, 2118, 2122, 2126, 2214, 
2218, 2224, 9297, 9298, 9299, 11114, 
11116, 11216, 12114, 12126, 12214, 
21112, 21114, 21212, 22114, 
22122, 22214, 31114, 32114, 32214, 

// sigma
3116, 3118, 
3218, 3226, 3228,
4028, 4228, 8116, 8117,
13112, 13114, 13116,  
13222, 13224, 13226, 
23114, 
23224, 
  //--NEW
3222, 

// lambda
3122, 3124, 3126, 3128, 
13124, 13126, 
23122, 23124, 
33122, 
43122, 53122, 
  //--NEW

// xi
  //--NEW



// omega
  //--NEW


// neutron
32112, 32212, 
42112, 42212,
31214, 32124,
  //--NEW
1214, 1218, 2116, 2124, 2128, 2216, 5128, 
5218, 9400, 9401, 12112, 12116, 12212, 12216, 
21214, 22124, 22212, 


// proton
  //--NEW
2212
};


//________________________________________________________________________________________________________
vector<int> cUniqueAProtFathersPIDs {
-53122, -43122, -42212, -42112, -33122, -32214, -32212, -32124, -32114, -32112, 
-31214, -31114, -23224, -23124, -23122, -23114, -22214, -22212, -22124, -22122, 
-22114, -21214, -21212, -21114, -21112, -13226, -13224, -13222, -13126, -13124, 
-13116, -13114, -13112, -12216, -12214, -12212, -12126, -12116, -12114, -12112, 
-11216, -11116, -11114, -9401, -9400, -9299, -9298, -9297, -8117, -8116, 
-5218, -5128, -4228, -4028, -3228, -3226, -3222, -3218, -3128, -3126, 
-3124, -3122, -3118, -3116, -2224, -2218, -2216, -2214, -2212, -2128, 
-2126, -2124, -2122, -2118, -2116, -2114, -1218, -1216, -1214, -1212, 
-1118, -1116, -1112

};

vector<int> cAllProtonFathers {
-53122, -43122, -42212, -42112, -33122, -32214, -32212, -32124, -32114, -32112, 
-31214, -31114, -23224, -23124, -23122, -23114, -22214, -22212, -22124, -22122, 
-22114, -21214, -21212, -21114, -21112, -13226, -13224, -13222, -13126, -13124, 
-13116, -13114, -13112, -12216, -12214, -12212, -12126, -12116, -12114, -12112, 
-11216, -11116, -11114, -9401, -9400, -9299, -9298, -9297, -8117, -8116, 
-5218, -5128, -4228, -4028, -3228, -3226, -3222, -3218, -3128, -3126, 
-3124, -3122, -3118, -3116, -2224, -2218, -2216, -2214, -2212, -2128, 
-2126, -2124, -2122, -2118, -2116, -2114, -1218, -1216, -1214, -1212, 
-1118, -1116, -1112, 1112, 1116, 1118, 1212, 1214, 1216, 1218, 
2114, 2116, 2118, 2122, 2124, 2126, 2128, 2212, 2214, 2216,
2218, 2224, 3116, 3118, 3122, 3124, 3126, 3128, 3218, 3222,
3226, 3228, 4028, 4228, 5128, 5218, 8116, 8117, 9297, 9298,
9299, 9400, 9401, 11114, 11116, 11216, 12112, 12114, 12116, 12126,
12212, 12214, 12216, 13112, 13114, 13116, 13124, 13126, 13222, 13224,
13226, 21112, 21114, 21212, 21214, 22114, 22122, 22124, 22212, 22214,
23114, 23122, 23124, 23224, 31114, 31214, 32112, 32114, 32124, 32212,
32214, 33122, 42112, 42212, 43122, 53122
};




//________________________________________________________________________________________________________
vector<PidInfo> cPidInfo {

//-------------------- a --------------------
//----- a_{0}
PidInfo(10111,  "a_{0}(1450)^{0}", 0.74),
PidInfo(10211,  "a_{0}(1450)^{+}", 0.74),
PidInfo(-10211, "a_{0}(1450)^{-}", 0.74),

//----- a_{2}
//TODO in particles.data, two 215 entries, should be 215 and -215
PidInfo(115,  "a_{2}(1320)^{0}", 1.84),
PidInfo(215,  "a_{2}(1320)^{+}", 1.84),
PidInfo(-215, "a_{2}(1320)^{-}", 1.84),

//----- a_{4}
PidInfo(119,  "a_{4}(2040)^{0}", 0.77),
PidInfo(219,  "a_{4}(2040)^{+}", 0.77),
PidInfo(-219, "a_{4}(2040)^{-}", 0.77),


//-------------------- phi --------------------
PidInfo(333,    "#phi(1020)"    , 46.26),
PidInfo(337,    "#phi_{3}(1850)", 2.27),
PidInfo(100333, "#phi(1680)"    , 1.32),


//-------------------- f --------------------
// f
//335,                    /* f'_{2} */
//10221, 10331, 9000223,  /* f_{0} */
//20223, 20333,           /* f_{1} */

//----- f'_{2}
PidInfo(335, "f'_{2}(1525)", 2.7),

//----- f_{0}
PidInfo(10221  , "f_{0}(1370)", 0.69),
PidInfo(10331  , "f_{0}(1710)", 1.42),
PidInfo(9000223, "f_{0}(1500)", 1.81),

//----- f_{1}
PidInfo(20223, "f_{1}(1285)", 8.19),
PidInfo(20333, "f_{1}(1420)", 3.59),

//-------------------- pi --------------------
PidInfo(10115,  "#pi_{2}(1670)^{0}", 0.76),
PidInfo(10215,  "#pi_{2}(1670)^{+}", 0.76),
PidInfo(-10215, "#pi_{2}(1670)^{-}", 0.76),

//-------------------- eta --------------------
PidInfo(100331, "#eta(1475)", 2.32),



//-------------------- kaons --------------------
PidInfo(311, "K^{0}", 2.6844e13), //Note: K0s=K0 in THERMINATOR2

PidInfo(321, "K+", 3.712e15),

PidInfo(313, "K*(892)^{0}", 4.11),
PidInfo(323, "K*(892)^{+}", 4.11),
PidInfo(30313, "K*(1680)^{0}", 0.61),
PidInfo(30323, "#bar{K*}(1680)^{0}", 0.61),
PidInfo(100313, "K*(1410)^{0}", 0.85),
PidInfo(100323, "K*(1410)^{+}", 0.85),

PidInfo(10311, "K*_{0}(1430)^{0}", 0.73),
PidInfo(10321, "K*_{0}(1430)^{+}", 0.73),

PidInfo(10313, "K_{1}(1270)^{0}", 2.19),
PidInfo(10323, "K_{1}(1270)^{+}", 2.19),
PidInfo(20313, "K_{1}(1400)^{0}", 1.13),
PidInfo(20323, "K_{1}(1400)^{+}", 1.13),

PidInfo(20315, "K_{2}(1820)^{+}", 0.71),
PidInfo(20325, "K_{2}(1820)^{-}", 0.71),

PidInfo(317, "K*_{3}(1780)^{0}", 1.24),
PidInfo(327, "#bar{K*}_{3}(1780)^{0}", 1.24),

//-----

PidInfo(-311, "#bar{K^{0}}", 2.6844e13), //Note: K0s=K0 in THERMINATOR2

PidInfo(-321, "K-", 3.712e15),

PidInfo(-313, "#bar{K*}(892)^{0}", 4.11),
PidInfo(-323, "K*(892)^{-}", 4.11),
PidInfo(-30313, "K*(1680)^{+}", 0.61),
PidInfo(-30323, "K*(1680)^{-}", 0.61),
PidInfo(-100313, "#bar{K*}(1410)^{0}", 0.85),
PidInfo(-100323, "K*(1410)^{-}", 0.85),

PidInfo(-10311, "#bar{K*}_{0}(1430)^{0}", 0.73),
PidInfo(-10321, "K*_{0}(1430)^{-}", 0.73),

PidInfo(-10313, "#bar{K}_{1}(1270)^{0}", 2.19),
PidInfo(-10323, "K_{1}(1270)^{-}", 2.19),
PidInfo(-20313, "#bar{K}_{1}(1400)^{0}", 1.13),
PidInfo(-20323, "K_{1}(1400)^{-}", 1.13),

PidInfo(-20315, "#bar{K}_{2}(1820)^{+}", 0.71),
PidInfo(-20325, "K_{2}(1820)^{0}", 0.71),

PidInfo(-317, "K*_{3}(1780)^{+}", 1.24),
PidInfo(-327, "#bar{K*}_{3}(1780)^{-}", 1.24),



//-------------------- sigma --------------------
PidInfo(3114, "#Sigma*(1385)^{-}", 5.33),
PidInfo(3116, "#Sigma(1775)^{+}", 1.64),
PidInfo(3118, "#Sigma(2030)^{+}", 1.1),

PidInfo(3212, "#Sigma^{0}", 2.22e4),
PidInfo(3214, "#Sigma*(1385)^{0}", 5.33),
PidInfo(3216, "#Sigma(1775)^{-}", 1.64),
PidInfo(3218, "#Sigma(2030)^{-}", 1.1),
PidInfo(3224, "#Sigma*(1385)^{+}", 5.33),
PidInfo(3226, "#Sigma(1775)^{0}", 1.64),
PidInfo(3228, "#Sigma(2030)^{0}", 1.1),

PidInfo(4028, "#Sigma(2250)^{+}", 1.97),
PidInfo(4128, "#Sigma(2250)^{-}", 1.97),
PidInfo(4228, "#Sigma(2250)^{0}", 1.97),
PidInfo(8116, "#Sigma(1750)^{+}", 2.19),
PidInfo(8117, "#Sigma(1750)^{0}", 2.19),
PidInfo(8118, "#Sigma(1750)^{-}", 2.19),

PidInfo(13112, "#Sigma(1660)^{+}", 1.97),
PidInfo(13114, "#Sigma(1670)^{+}", 3.29),
PidInfo(13116, "#Sigma(1915)^{+}", 1.64),

PidInfo(13212, "#Sigma(1660)^{-}", 1.97),
PidInfo(13214, "#Sigma(1670)^{-}", 3.29),
PidInfo(13216, "#Sigma(1915)^{-}", 1.64),
PidInfo(13222, "#Sigma(1660)^{0}", 1.97),
PidInfo(13224, "#Sigma(1670)^{0}", 3.29),
PidInfo(13226, "#Sigma(1915)^{0}", 1.64),

PidInfo(23114, "#Sigma(1940)^{+}", 0.9),

PidInfo(23214, "#Sigma(1940)^{-}", 0.9),
PidInfo(23224, "#Sigma(1940)^{0}", 0.9),

PidInfo(3222, "#Sigma(1189)^{+}", 2.404e13),

//-----

PidInfo(-3114, "#bar{#Sigma*}(1385)^{+}", 5.33),
PidInfo(-3116, "#bar{#Sigma}(1775)^{-}", 1.64),
PidInfo(-3118, "#bar{#Sigma}(2030)^{-}", 1.1),

PidInfo(-3212, "#bar{#Sigma}^{0}", 2.22e4),
PidInfo(-3214, "#bar{#Sigma*}(1385)^{0}", 5.33),
PidInfo(-3216, "#bar{#Sigma}(1775)^{+}", 1.64),
PidInfo(-3218, "#bar{#Sigma}(2030)^{+}", 1.1),
PidInfo(-3224, "#bar{#Sigma*}(1385)^{-}", 5.33),
PidInfo(-3226, "#bar{#Sigma}(1775)^{0}", 1.64),
PidInfo(-3228, "#bar{#Sigma}(2030)^{0}", 1.1),

PidInfo(-4028, "#bar{#Sigma}(2250)^{-}", 1.97),
PidInfo(-4128, "#bar{#Sigma}(2250)^{+}", 1.97),
PidInfo(-4228, "#bar{#Sigma}(2250)^{0}", 1.97),
PidInfo(-8116, "#bar{#Sigma}(1750)^{-}", 2.19),
PidInfo(-8117, "#bar{#Sigma}(1750)^{0}", 2.19),
PidInfo(-8118, "#bar{#Sigma}(1750)^{+}", 2.19),

PidInfo(-13112, "#bar{#Sigma}(1660)^{-}", 1.97),
PidInfo(-13114, "#bar{#Sigma}(1670)^{-}", 3.29),
PidInfo(-13116, "#bar{#Sigma}(1915)^{-}", 1.64),

PidInfo(-13212, "#bar{#Sigma}(1660)^{+}", 1.97),
PidInfo(-13214, "#bar{#Sigma}(1670)^{+}", 3.29),
PidInfo(-13216, "#bar{#Sigma}(1915)^{+}", 1.64),
PidInfo(-13222, "#bar{#Sigma}(1660)^{0}", 1.97),
PidInfo(-13224, "#bar{#Sigma}(1670)^{0}", 3.29),
PidInfo(-13226, "#bar{#Sigma}(1915)^{0}", 1.64),

PidInfo(-23114, "#bar{#Sigma}(1940)^{-}", 0.9),

PidInfo(-23214, "#bar{#Sigma}(1940)^{+}", 0.9),
PidInfo(-23224, "#bar{#Sigma}(1940)^{0}", 0.9),

PidInfo(-3222, "#bar{#Sigma}(1189)^{-}", 2.404e13),



//-------------------- lambda --------------------
PidInfo(3122, "#Lambda", 7.89e13),
PidInfo(3124, "#Lambda(1520)", 12.65),
PidInfo(3126, "#Lambda(1820)", 2.47),
PidInfo(3128, "#Lambda(2100)", 0.99),

PidInfo(13124, "#Lambda(1690)", 3.29),
PidInfo(13126, "#Lambda(1830)", 2.08),

PidInfo(23122, "#Lambda(1600)", 1.32),
PidInfo(23124, "#Lambda(1890)", 1.97),

PidInfo(33122, "#Lambda(1670)", 5.64),

PidInfo(43122, "#Lambda(1800)", 0.66),
PidInfo(53122, "#Lambda(1810)", 1.32),

//-----

PidInfo(-3122, "#bar{#Lambda}", 7.89e13),
PidInfo(-3124, "#bar{#Lambda}(1520)", 12.65),
PidInfo(-3126, "#bar{#Lambda}(1820)", 2.47),
PidInfo(-3128, "#bar{#Lambda}(2100)", 0.99),

PidInfo(-13124, "#bar{#Lambda}(1690)", 3.29),
PidInfo(-13126, "#bar{#Lambda}(1830)", 2.08),

PidInfo(-23122, "#bar{#Lambda}(1600)", 1.32),
PidInfo(-23124, "#bar{#Lambda}(1890)", 1.97),

PidInfo(-33122, "#bar{#Lambda}(1670)", 5.64),

PidInfo(-43122, "#bar{#Lambda}(1800)", 0.66),
PidInfo(-53122, "#bar{#Lambda}(1810)", 1.32),


//-------------------- xi --------------------
PidInfo(3312, "#Xi^{-}", 4.91e13),
PidInfo(3322, "#Xi^{0}", 8.71e13),

PidInfo(8900, "#bar{#Xi}(2030)^{+}", 9.87),
PidInfo(8901, "#Xi(2030)^{-}", 9.87),

PidInfo(13314, "#Xi(1820)^{-}", 8.22),
PidInfo(13324, "#bar{#Xi}(1820)^{+}", 8.22),

PidInfo(67000, "#Xi(1950)^{0}", 3.29),
PidInfo(67001, "#Xi(1950)^{-}", 3.29),
PidInfo(67718, "#Xi(1690)^{0}", 6.58),
PidInfo(67719, "#bar{#Xi}(1690)^{+}", 6.58),

//-----

PidInfo(-3312, "#bar{#Xi}^{+}", 4.91e13),
PidInfo(-3322, "#bar{#Xi}^{0}", 8.71e13),

PidInfo(-8900, "#bar{#Xi}(2030)^{0}", 9.87),
PidInfo(-8901, "#Xi(2030)^{0}", 9.87),

PidInfo(-13314, "#Xi(1820)^{0}", 8.22),
PidInfo(-13324, "#bar{#Xi}(1820)^{0}", 8.22),

PidInfo(-67000, "#bar{#Xi}(1950)^{0}", 3.29),
PidInfo(-67001, "#bar{#Xi}(1950)^{+}", 3.29),
PidInfo(-67718, "#bar{#Xi}(1690)^{0}", 6.58),
PidInfo(-67719, "#Xi(1690)^{-}", 6.58),

//-------------------- omega --------------------
PidInfo(3334, "#Omega^{-}", 2.461e13),
PidInfo(9000, "#Omega(2250)^{-}", 3.59),

//-----

PidInfo(-3334, "#bar{#Omega}^{+}", 2.461e13),
PidInfo(-9000, "#bar{#Omega}(2250)^{+}", 3.59),


//-------------------- nucleons --------------------
PidInfo(32112, "N(1650)^{+}", 1.41),
PidInfo(32212, "N(1650)^{0}", 1.41),

PidInfo(42112, "N(1710)^{+}", 1.97),
PidInfo(42212, "N(1710)^{0}", 1.97),

PidInfo(31214, "N(1720)^{+}", 0.79),
PidInfo(32124, "N(1720)^{0}", 0.79),

PidInfo(1214, "N(1520)^{0}", 1.72),
PidInfo(1218, "N(2190)^{+}", 0.39),
PidInfo(2116, "N(1675)^{+}", 1.32),
PidInfo(2124, "N(1520)^{+}", 1.72),
PidInfo(2128, "N(2190)^{0}", 0.39),
PidInfo(2216, "N(1675)^{0}", 1.32),
PidInfo(5128, "N(2250)^{+}", 0.39),

PidInfo(5218, "N(2250)^{0}", 0.39),
PidInfo(9400, "N(2600)^{0}", 0.30),
PidInfo(9401, "N(2600)^{+}", 0.30),
PidInfo(12112, "N(1440)^{0}", 0.56),
PidInfo(12116, "N(1680)^{+}", 1.52),
PidInfo(12212, "N(1440)^{+}", 0.56),
PidInfo(12216, "N(1680)^{0}", 1.52),

PidInfo(21214, "N(1700)^{+}", 1.32),
PidInfo(22124, "N(1700)^{0}", 1.32),
PidInfo(22212, "N(1535)^{+}", 1.32),

//-----

PidInfo(-32112, "#bar{N}(1650)^{-}", 1.41),
PidInfo(-32212, "#bar{N}(1650)^{0}", 1.41),

PidInfo(-42112, "#bar{N}(1710)^{-}", 1.97),
PidInfo(-42212, "#bar{N}(1710)^{0}", 1.97),

PidInfo(-31214, "#bar{N}(1720)^{-}", 0.79),
PidInfo(-32124, "#bar{N}(1720)^{0}", 0.79),

PidInfo(-1214, "#bar{N}(1520)^{0}", 1.72),
PidInfo(-1218, "#bar{N}(2190)^{-}", 0.39),
PidInfo(-2116, "#bar{N}(1675)^{-}", 1.32),
PidInfo(-2124, "#bar{N}(1520)^{-}", 1.72),
PidInfo(-2128, "#bar{N}(2190)^{0}", 0.39),
PidInfo(-2216, "#bar{N}(1675)^{0}", 1.32),
PidInfo(-5128, "#bar{N}(2250)^{-}", 0.39),

PidInfo(-5218, "#bar{N}(2250)^{0}", 0.39),
PidInfo(-9400, "#bar{N}(2600)^{0}", 0.30),
PidInfo(-9401, "#bar{N}(2600)^{-}", 0.30),
PidInfo(-12112, "#bar{N}(1440)^{0}", 0.56),
PidInfo(-12116, "#bar{N}(1680)^{-}", 1.52),
PidInfo(-12212, "#bar{N}(1440)^{-}", 0.56),
PidInfo(-12216, "#bar{N}(1680)^{0}", 1.52),

PidInfo(-21214, "#bar{N}(1700)^{-}", 1.32),
PidInfo(-22124, "#bar{N}(1700)^{0}", 1.32),
PidInfo(-22212, "#bar{N}(1535)^{-}", 1.32),

//-------------------- delta --------------------
PidInfo(1112, "#Delta(1620)^{++}", 1.41),
PidInfo(1116, "#Delta(1905)^{++}", 0.60),
PidInfo(1118, "#Delta(1950)^{++}", 0.69),
PidInfo(1212, "#Delta(1620)^{+}", 1.41),

PidInfo(1216, "#Delta(1905)^{+}", 0.60),
PidInfo(2114, "#Delta(1232)^{0}", 1.72),
PidInfo(2118, "#Delta(1950)^{+}", 0.69),
PidInfo(2122, "#Delta(1620)^{0}", 1.41),
PidInfo(2126, "#Delta(1905)^{0}", 0.60),
PidInfo(2214, "#Delta(1232)^{+}", 1.72),

PidInfo(2218, "#Delta(1950)^{0}", 0.69),
PidInfo(2224, "#Delta(1232)^{++}", 1.72),
PidInfo(9297, "#Delta(2420)^{++}", 0.49),
PidInfo(9298, "#Delta(2420)^{+}", 0.49),
PidInfo(9299, "#Delta(2420)^{0}", 0.49),
PidInfo(11114, "#Delta(1700)^{++}", 0.66),

PidInfo(11116, "#Delta(1930)^{++}", 0.55),
PidInfo(11216, "#Delta(1930)^{+}", 0.55),
PidInfo(12114, "#Delta(1700)^{+}", 0.66),
PidInfo(12126, "#Delta(1930)^{0}", 0.55),
PidInfo(12214, "#Delta(1700)^{0}", 0.66),

PidInfo(21112, "#Delta(1910)^{++}", 0.70),
PidInfo(21114, "#Delta(1920)^{++}", 0.76),
PidInfo(21212, "#Delta(1910)^{+}", 0.70),
PidInfo(22114, "#Delta(1920)^{+}", 0.76),

PidInfo(22122, "#Delta(1910)^{0}", 0.70),
PidInfo(22214, "#Delta(1920)^{0}", 0.76),
PidInfo(31114, "#Delta(1600)^{++}", 0.62),
PidInfo(32114, "#Delta(1600)^{+}", 0.62),
PidInfo(32214, "#Delta(1600)^{0}", 0.62),


//-----

PidInfo(-1112, "#bar{#Delta}(1620)^{--}", 1.41),
PidInfo(-1116, "#bar{#Delta}(1905)^{--}", 0.60),
PidInfo(-1118, "#bar{#Delta}(1950)^{--}", 0.69),
PidInfo(-1212, "#bar{#Delta}(1620)^{-}", 1.41),

PidInfo(-1216, "#bar{#Delta}(1905)^{-}", 0.60),
PidInfo(-2114, "#bar{#Delta}(1232)^{0}", 1.72),
PidInfo(-2118, "#bar{#Delta}(1950)^{-}", 0.69),
PidInfo(-2122, "#bar{#Delta}(1620)^{0}", 1.41),
PidInfo(-2126, "#bar{#Delta}(1905)^{0}", 0.60),
PidInfo(-2214, "#bar{#Delta}(1232)^{-}", 1.72),

PidInfo(-2218, "#bar{#Delta}(1950)^{0}", 0.69),
PidInfo(-2224, "#bar{#Delta}(1232)^{--}", 1.72),
PidInfo(-9297, "#bar{#Delta}(2420)^{--}", 0.49),
PidInfo(-9298, "#bar{#Delta}(2420)^{-}", 0.49),
PidInfo(-9299, "#bar{#Delta}(2420)^{0}", 0.49),
PidInfo(-11114, "#bar{#Delta}(1700)^{--}", 0.66),

PidInfo(-11116, "#bar{#Delta}(1930)^{--}", 0.55),
PidInfo(-11216, "#bar{#Delta}(1930)^{-}", 0.55),
PidInfo(-12114, "#bar{#Delta}(1700)^{-}", 0.66),
PidInfo(-12126, "#bar{#Delta}(1930)^{0}", 0.55),
PidInfo(-12214, "#bar{#Delta}(1700)^{0}", 0.66),

PidInfo(-21112, "#bar{#Delta}(1910)^{--}", 0.70),
PidInfo(-21114, "#bar{#Delta}(1920)^{--}", 0.76),
PidInfo(-21212, "#bar{#Delta}(1910)^{-}", 0.70),
PidInfo(-22114, "#bar{#Delta}(1920)^{-}", 0.76),

PidInfo(-22122, "#bar{#Delta}(1910)^{0}", 0.70),
PidInfo(-22214, "#bar{#Delta}(1920)^{0}", 0.76),
PidInfo(-31114, "#bar{#Delta}(1600)^{--}", 0.62),
PidInfo(-32114, "#bar{#Delta}(1600)^{-}", 0.62),
PidInfo(-32214, "#bar{#Delta}(1600)^{0}", 0.62),


//-------------------- proton --------------------
PidInfo(2212, "p", 2.0e60),

//-----

PidInfo(-2212, "#bar{p}", 2.0e60)
};





